
module NEW_Q_TB(
	output logic [31:0] new_Q[37][4],
	output logic done_o,
	//input logic [31:0] old_Q [37][4],
	//input logic [5:0] maze_state,
	//input logic [31:0] max_Q,
	//input logic [3:0] action,
	//input logic [3:0] reward,
	//input logic clk,
	input logic rst);
	//input logic done);
		

		
	NEW_Q NEW_Q_test(
	.done(done), 
	.done_o(done_o), 
	.old_Q(new_Q), 
	.maze_state(maze_state), 
	.clk(clk), 
	.rst(rst), 
	.max_Q(max_Q), 
	.action(action), 
	.reward(reward), 
	.new_Q(new_Q));
	
//testing values
	logic test_complete;
	localparam SF = 2.0**-16.0; //scaling factor Q15.16
	logic old_Q;
	logic max_Q;
	logic maze_state;
	logic action;
	logic reward;
//assign test input values
//	assign old_Q[5][2] = 32'b00000000000001101110011000000000; //6.9 00000000000001101110011000000000 included without 32'b for easier copying
//	assign max_Q = 32'b00000000000001010000000000000000; //5 00000000000001010000000000000000 included without 32'b for easier copying
//	assign maze_state = 6'd5;
//	assign action = 3'd2;
//	assign reward = 32'd10;
	assign done = 1;
//	assign X_learn_Trim = 32'd0;

//this clock is a modified version of one taken from a TB I made for elec241
	initial begin
		test_complete = 0;
		clk = 1;
		forever // run clock forever
		begin
			#10ns clk = ~clk; //10ns duty cycle for 20ns period and 50MHz clock
			if (test_complete == 1) break;//stop clock when the final test is complete
		end
	end
		
	initial
	begin
		@(posedge clk)
		old_Q[5][2] = 32'b00000000000001101110011000000000; //6.9 00000000000001101110011000000000 included without 32'b for easier copying
		max_Q = 32'b00000000000001010000000000000000; //5 00000000000001010000000000000000 included without 32'b for easier copying
		maze_state = 6'd5;
		action = 3'd2;
		reward = 32'd10;
		@(posedge clk)
		#10us;
		// 6.9+0.2*(10+(0.9*5)-6.9 = 2.9 â‰ˆ 32'd00000000000000101110011001100110
		assert (new_Q == 32'b00000000000000101110011001100110)
		begin
			$display("Pass new Q = %f", $itor(new_Q*SF));
		end
		else
		begin
			$display("Fail new Q = %f", $itor(new_Q*SF));
		end
		test_complete = 1;
	end

	
endmodule
